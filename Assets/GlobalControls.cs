//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/GlobalControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GlobalControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GlobalControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GlobalControls"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""bf09ebdf-90ad-48d6-b700-0bd665097b35"",
            ""actions"": [
                {
                    ""name"": ""Running"",
                    ""type"": ""Value"",
                    ""id"": ""2d666aa8-da51-4fbf-8c8d-6b940abfc238"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jumping"",
                    ""type"": ""Button"",
                    ""id"": ""cc30cb8e-4b4d-46c1-8c32-3951fb51a62c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""d5e4b6a4-d95a-4de0-b6ef-221742d099f1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6daa5467-4ec3-4b6b-b9c8-c720675a1623"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Running"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""eb17cd8d-bf81-4b09-b9fb-c69988703eef"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Running"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7e505add-f501-4ec7-a8b1-fc26bf7d690a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Running"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6cb61d15-8087-47a2-baeb-bc6d6edaaa15"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Running"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2547d96b-3c69-4469-bda9-1ddc8bc899b9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Running"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""89d7daf1-df57-47c8-a259-04116fe2d89f"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Running"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0743e577-b479-4e31-91c9-6890f4f97dc1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jumping"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e988c259-e99f-4fcd-8cd4-edb20be8a56f"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jumping"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2fca2506-44e9-4ad6-b825-92fa208156a8"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=10,y=10)"",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24b7c2c3-b5cb-4f09-a91e-8229da35d2c5"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Rotate"",
            ""id"": ""44f7f18a-46ed-4258-a36a-29102725e70a"",
            ""actions"": [
                {
                    ""name"": ""SelectDirection"",
                    ""type"": ""Button"",
                    ""id"": ""3edbaf2e-74fd-4c70-8afd-97f40def9417"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ConfirmRotate"",
                    ""type"": ""Button"",
                    ""id"": ""20d0088a-cb41-466c-b013-dcf7e10548ac"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DisableRotate"",
                    ""type"": ""Button"",
                    ""id"": ""2edb401e-1acf-4a52-bcaa-ca26660d48e7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ec117910-8202-44f9-8110-c34fe48b81a6"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b57240b-2c05-430d-bcee-de26189bf9ca"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""387685e8-10e1-412a-b540-ce2500fb4f05"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13519011-83d4-4d61-aca5-5bd5850a63b7"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7705af5e-5d7b-41fe-b954-2814abccd8b3"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f10be394-4482-4642-9694-a6258064f550"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""acc96fc7-7699-4e66-8fc2-5331086ccd73"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04699900-fb16-4d3e-8eb2-fdca61e8e896"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4fd8806d-38ca-45c7-b3d7-341f24851684"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConfirmRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7cb889a4-ba09-4054-92d4-5b09b12de9b1"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConfirmRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f112b494-5181-4ec3-9b39-ad6c3ec042d2"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DisableRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9bbe33e7-aae3-4dc6-8a28-1902bb1a2d07"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DisableRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pause"",
            ""id"": ""7b1fd6ec-d62d-4155-b806-b65c5d0231ec"",
            ""actions"": [
                {
                    ""name"": ""PauseAction"",
                    ""type"": ""Button"",
                    ""id"": ""75944f80-18b5-48ae-a2d6-67ce24123ea0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bf8ef767-579b-4e24-b3e6-30b8285b65af"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74d06a68-044e-4fc5-bba5-4517c6ce46ec"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Skip"",
            ""id"": ""c98c22d4-8571-4104-a22f-5e86097eb506"",
            ""actions"": [
                {
                    ""name"": ""SkipAction"",
                    ""type"": ""Button"",
                    ""id"": ""871fe451-a5ed-45f4-b066-1f01d8bb396e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f128b3a5-b5c8-4aa0-8441-619826cdad0d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a89fdd1c-d2dd-4b45-8af5-9dc98ccb8ba3"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Running = m_Movement.FindAction("Running", throwIfNotFound: true);
        m_Movement_Jumping = m_Movement.FindAction("Jumping", throwIfNotFound: true);
        m_Movement_Look = m_Movement.FindAction("Look", throwIfNotFound: true);
        // Rotate
        m_Rotate = asset.FindActionMap("Rotate", throwIfNotFound: true);
        m_Rotate_SelectDirection = m_Rotate.FindAction("SelectDirection", throwIfNotFound: true);
        m_Rotate_ConfirmRotate = m_Rotate.FindAction("ConfirmRotate", throwIfNotFound: true);
        m_Rotate_DisableRotate = m_Rotate.FindAction("DisableRotate", throwIfNotFound: true);
        // Pause
        m_Pause = asset.FindActionMap("Pause", throwIfNotFound: true);
        m_Pause_PauseAction = m_Pause.FindAction("PauseAction", throwIfNotFound: true);
        // Skip
        m_Skip = asset.FindActionMap("Skip", throwIfNotFound: true);
        m_Skip_SkipAction = m_Skip.FindAction("SkipAction", throwIfNotFound: true);
    }

    ~@GlobalControls()
    {
        UnityEngine.Debug.Assert(!m_Movement.enabled, "This will cause a leak and performance issues, GlobalControls.Movement.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Rotate.enabled, "This will cause a leak and performance issues, GlobalControls.Rotate.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Pause.enabled, "This will cause a leak and performance issues, GlobalControls.Pause.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Skip.enabled, "This will cause a leak and performance issues, GlobalControls.Skip.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Running;
    private readonly InputAction m_Movement_Jumping;
    private readonly InputAction m_Movement_Look;
    public struct MovementActions
    {
        private @GlobalControls m_Wrapper;
        public MovementActions(@GlobalControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Running => m_Wrapper.m_Movement_Running;
        public InputAction @Jumping => m_Wrapper.m_Movement_Jumping;
        public InputAction @Look => m_Wrapper.m_Movement_Look;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Running.started += instance.OnRunning;
            @Running.performed += instance.OnRunning;
            @Running.canceled += instance.OnRunning;
            @Jumping.started += instance.OnJumping;
            @Jumping.performed += instance.OnJumping;
            @Jumping.canceled += instance.OnJumping;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Running.started -= instance.OnRunning;
            @Running.performed -= instance.OnRunning;
            @Running.canceled -= instance.OnRunning;
            @Jumping.started -= instance.OnJumping;
            @Jumping.performed -= instance.OnJumping;
            @Jumping.canceled -= instance.OnJumping;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Rotate
    private readonly InputActionMap m_Rotate;
    private List<IRotateActions> m_RotateActionsCallbackInterfaces = new List<IRotateActions>();
    private readonly InputAction m_Rotate_SelectDirection;
    private readonly InputAction m_Rotate_ConfirmRotate;
    private readonly InputAction m_Rotate_DisableRotate;
    public struct RotateActions
    {
        private @GlobalControls m_Wrapper;
        public RotateActions(@GlobalControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectDirection => m_Wrapper.m_Rotate_SelectDirection;
        public InputAction @ConfirmRotate => m_Wrapper.m_Rotate_ConfirmRotate;
        public InputAction @DisableRotate => m_Wrapper.m_Rotate_DisableRotate;
        public InputActionMap Get() { return m_Wrapper.m_Rotate; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RotateActions set) { return set.Get(); }
        public void AddCallbacks(IRotateActions instance)
        {
            if (instance == null || m_Wrapper.m_RotateActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RotateActionsCallbackInterfaces.Add(instance);
            @SelectDirection.started += instance.OnSelectDirection;
            @SelectDirection.performed += instance.OnSelectDirection;
            @SelectDirection.canceled += instance.OnSelectDirection;
            @ConfirmRotate.started += instance.OnConfirmRotate;
            @ConfirmRotate.performed += instance.OnConfirmRotate;
            @ConfirmRotate.canceled += instance.OnConfirmRotate;
            @DisableRotate.started += instance.OnDisableRotate;
            @DisableRotate.performed += instance.OnDisableRotate;
            @DisableRotate.canceled += instance.OnDisableRotate;
        }

        private void UnregisterCallbacks(IRotateActions instance)
        {
            @SelectDirection.started -= instance.OnSelectDirection;
            @SelectDirection.performed -= instance.OnSelectDirection;
            @SelectDirection.canceled -= instance.OnSelectDirection;
            @ConfirmRotate.started -= instance.OnConfirmRotate;
            @ConfirmRotate.performed -= instance.OnConfirmRotate;
            @ConfirmRotate.canceled -= instance.OnConfirmRotate;
            @DisableRotate.started -= instance.OnDisableRotate;
            @DisableRotate.performed -= instance.OnDisableRotate;
            @DisableRotate.canceled -= instance.OnDisableRotate;
        }

        public void RemoveCallbacks(IRotateActions instance)
        {
            if (m_Wrapper.m_RotateActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRotateActions instance)
        {
            foreach (var item in m_Wrapper.m_RotateActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RotateActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RotateActions @Rotate => new RotateActions(this);

    // Pause
    private readonly InputActionMap m_Pause;
    private List<IPauseActions> m_PauseActionsCallbackInterfaces = new List<IPauseActions>();
    private readonly InputAction m_Pause_PauseAction;
    public struct PauseActions
    {
        private @GlobalControls m_Wrapper;
        public PauseActions(@GlobalControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PauseAction => m_Wrapper.m_Pause_PauseAction;
        public InputActionMap Get() { return m_Wrapper.m_Pause; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseActions set) { return set.Get(); }
        public void AddCallbacks(IPauseActions instance)
        {
            if (instance == null || m_Wrapper.m_PauseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PauseActionsCallbackInterfaces.Add(instance);
            @PauseAction.started += instance.OnPauseAction;
            @PauseAction.performed += instance.OnPauseAction;
            @PauseAction.canceled += instance.OnPauseAction;
        }

        private void UnregisterCallbacks(IPauseActions instance)
        {
            @PauseAction.started -= instance.OnPauseAction;
            @PauseAction.performed -= instance.OnPauseAction;
            @PauseAction.canceled -= instance.OnPauseAction;
        }

        public void RemoveCallbacks(IPauseActions instance)
        {
            if (m_Wrapper.m_PauseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPauseActions instance)
        {
            foreach (var item in m_Wrapper.m_PauseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PauseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PauseActions @Pause => new PauseActions(this);

    // Skip
    private readonly InputActionMap m_Skip;
    private List<ISkipActions> m_SkipActionsCallbackInterfaces = new List<ISkipActions>();
    private readonly InputAction m_Skip_SkipAction;
    public struct SkipActions
    {
        private @GlobalControls m_Wrapper;
        public SkipActions(@GlobalControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SkipAction => m_Wrapper.m_Skip_SkipAction;
        public InputActionMap Get() { return m_Wrapper.m_Skip; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SkipActions set) { return set.Get(); }
        public void AddCallbacks(ISkipActions instance)
        {
            if (instance == null || m_Wrapper.m_SkipActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SkipActionsCallbackInterfaces.Add(instance);
            @SkipAction.started += instance.OnSkipAction;
            @SkipAction.performed += instance.OnSkipAction;
            @SkipAction.canceled += instance.OnSkipAction;
        }

        private void UnregisterCallbacks(ISkipActions instance)
        {
            @SkipAction.started -= instance.OnSkipAction;
            @SkipAction.performed -= instance.OnSkipAction;
            @SkipAction.canceled -= instance.OnSkipAction;
        }

        public void RemoveCallbacks(ISkipActions instance)
        {
            if (m_Wrapper.m_SkipActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISkipActions instance)
        {
            foreach (var item in m_Wrapper.m_SkipActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SkipActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SkipActions @Skip => new SkipActions(this);
    public interface IMovementActions
    {
        void OnRunning(InputAction.CallbackContext context);
        void OnJumping(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
    public interface IRotateActions
    {
        void OnSelectDirection(InputAction.CallbackContext context);
        void OnConfirmRotate(InputAction.CallbackContext context);
        void OnDisableRotate(InputAction.CallbackContext context);
    }
    public interface IPauseActions
    {
        void OnPauseAction(InputAction.CallbackContext context);
    }
    public interface ISkipActions
    {
        void OnSkipAction(InputAction.CallbackContext context);
    }
}
